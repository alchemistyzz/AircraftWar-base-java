@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # shootNum:int
    # power:int
    # direction:int
    - strategy:Strategy
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getStrategy():Strategy
    + executeShoot(int x,int y,int speedX,int speedY,int shootNum,int power,int direction,boolean flag):List<BaseBullet>
    + update():void
    + update1():void
    + reset():void
 }

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
	+ update():void
}
abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + active(HeroAircraft heroaircraft):void
}
AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- BossEnemy


BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet



class HeroAircraft {
    - instance:HeroAircraft
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + getInstance(int locationX, int locationY, int speedX, int speedY, int hp):instance
    + forward():void
}

class BossEnemy{
     + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
     + forward():void
}
class EliteEnemy{
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
}


class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + executeShoot(int x,int y,int speedX,int speedY,int shootNum,int power,int direction,boolean flag):List<BaseBullet>
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class Blood {
    + blood(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroaircraft):void
}

class Bomb {
    - subscibers:List<Subscriber>
    + addSubsciber(Subsciber subsciber):void
    + bomb(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroaircraft):void
}
class Bullet {
    + Bullet_LOCK:Object
    + bullet(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroaircraft):void
}
class Damage{
    + damage(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroaircraft):void
}
class Froze{
    - subscibers1:List<SubscriberFroze>
    + Froze_LOCK:Object
    + addSubsciber1(SubscriberFroze subscriber):void
    + froze(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroaircraft):void
}
class Lift{
    + Lift(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroaircraft):void
    }

AbstractProp <|-- Blood
AbstractProp <|-- Bomb
AbstractProp <|-- Bullet
AbstractProp <|-- Damage
AbstractProp <|-- Froze
AbstractProp <|-- Lift




@enduml